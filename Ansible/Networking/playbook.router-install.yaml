
at the end of this play, the router should

have opnsense installed with 
  items for PXE
    PXE server installed
    DHCP server installed
    http server installed
  items for tailscale
    tailscale
    advertise local routes over tailscale with correct CIDRS
    act as an exit node
    set default routes for local and remote LANs
  items for firewall
    port forwarding to the correct k8s load balancer ingresses

IDS to be determined

- name: Install Tailscale
  hosts: routers
    vars: 
# CONSIDER CHANGING THE NEXT FEW PLAYS 
# TO BE MORE IN LINE WITH HOW PFSENSE CREATES FIREWALL RULES
#
- name: Tailscale Setup
  hosts: main_router
  become: yes
  become_user: asutliff
  roles:
    - role: artis3n.tailescale
      vars:
        tailscale_args: "--advertise-routes=192.168.0.0/17 --snat-subnet-routes=true --accept-routes --advertise-exit-node"
        tailscale_authkey: "{{ lookup('env', 'TAILSCALE_KEY') }}"
    - role: routing
      vars:
        table: filter
        chain: FORWARD
        in_interface: 'tailscale0'
        jump: ACCEPT
    - role: routing
      vars:
        table: nat
        chain: POSTROUTING
        out_interface: '{{ ansible_default_ipv4.interface }}'
        jump: MASQUARADE
    ### PORT FORWARDING FOR PUBLIC K8S IGRESSES ###
    - role: routing
      vars:
        table: nat
        chain: PREROUTING
        in_interface: wan0
        destination_port: 80
        jump: DNAT
        to_destination: '{{ find k8s LB in inventory}}'
        

  # iptables bug fix needs to be done
  # run an ACCEPT chain on the tailscale0 interface, POSTROUT nat to local lan interface
  #

# sudo iptables -A FORWARD -i lan0 -o wan0 DROP
# # sudo iptables -A PREROUTING -i lan0 -j DNAT 
# then add output 
# iptables -t nat -A POSTROUTING -i lan0 -o tailscale0 -j MASQUARADE
- name: Remote Router Tailscale Setup
  hosts: remote_router
  become: yes
  become_user: asutliff
  roles:
    - role: artis3n.tailscale
      vars:
        tailscale_args: "advertise-routes=192.168.128.0/17 --snat-subnet-routes=true --accept-routes"
        tailscale_authkey: "{{ lookop('env', 'TAILSCALE_KEY') }}"
    - role: routing
      vars:
        masquarade_out_interface: 'tailscale0'
        masquarade_source: '192.168.128.0/17'
        masquarade_dest: '192.168.0.0/17'



- name: Local Router Pfsense Setup
- name: Configure pfSense firewall and NAT rules for Tailscale interface  
  hosts: main_router 
  gather_facts: no  
  collections:  
    - pfsensible.core  
  
  tasks:  
    - name: Allow traffic from tailscale0 to lan0 subnet  
      pfsensible.core.rule:  
        state: present  
        name: "Allow tailscale0 to lan0 subnet"  
        action: "pass"  
        interface: "tailscale0"  
        direction: "in"  
        ipprotocol: "inet"  
        protocol: "any"  
        source:  
          network: "any"  
        destination:  
          network: "192.168.0.0/17"  
      
    - name: Allow traffic from tailscale0 to any  
      pfsensible.core.rule:  
        state: present  
        name: "Allow tailscale0 to any"  
        action: "pass"  
        interface: "tailscale0"  
        direction: "in"  
        ipprotocol: "inet"  
        protocol: "any"  
        source:  
          network: "any"  
        destination:  
          network: "any"  
      
    - name: Create NAT rule to masquerade traffic from tailscale0 to lan0 subnet  
      pfsensible.core.nat:  
        state: present  
        type: "outbound"  
        interface: "lan0"  
        source_network: "tailscale0 subnet"  # Replace with the actual tailscale0 subnet  
        destination_network: "192.168.0.0/17"  
        translation_address: "interface"  
        descr: "NAT tailscale0 to lan0 subnet"  
  
    - name: Create NAT rule to masquerade all other traffic from tailscale0 to wan0  
      pfsensible.core.nat:  
        state: present  
        type: "outbound"  
        interface: "wan0"  
        source_network: "tailscale0 subnet"  # Replace with the actual tailscale0 subnet  
        destination_network: "!192.168.0.0/17"  
        translation_address: "interface"  
        descr: "NAT tailscale0 to wan0"  


- name: Remote Router Setup
  hosts: remote_router
  become_user: asutliff
  tasks:
- name: Create NAT rule to masquerade LAN to Tailscale  
      pfsensible.core.rule:  
        state: present  
        name: "Masquerade LAN to Tailscale"  
        action: "pass"  
        interface: "lan0"  
        direction: "in"  
        ipprotocol: "inet45"  
        source: 192.168.128.0/17:lan0
        destination: "any"
      register: result  

# NOTE, GPT IS INTERPRETING SOURCE AND DESTINATION IN TWO SEPARATE FIELDS
#         source:  
#          network: "lan"  # Ensure this matches the name of your LAN network in pfSense  
#        destination:  
#          network: "any"  # or specify a specific destination network if needed  
#      register: result
  
    - name: Debug the result  
      debug:  
        var: result 

    - name: Add Block Non-Tailscale Trafic
      pfsense_rule:
        name: 'Block Trafic from 192.168.128.0/17 to wan0'
        action: block
        

