
#at the end of this play, the router should

#have opnsense installed with 
#  items for PXE
#    PXE server installed
#    DHCP server installed
#    http server installed
#  items for tailscale
#    tailscale
#    advertise local routes over tailscale with correct CIDRS
#    act as an exit node
#    set default routes for local and remote LANs
#  items for firewall
#    port forwarding to the correct k8s load balancer ingresses
#
#IDS to be determined

- name: Set Up Remote Router
  hosts: remote_router
  roles:
    - gekmihesg.openwrt
  tasks:
    - name: install serial exposure module
      opkg:
        name: kmod-usb-serial-option
    - name: install uqmi requirements
      opkg:
        name: "{{ item }}"
        state: present
      loop:
        - kmod-usb-net-qmi-wwan
        - uqmi
        - luci-proto-qmi
    - name: set wwan interface
      uci:
        command: set
        key: network.wwan
        value:
          protocol: qmi
          device: /dev/cdc-wdm0
          apn: internet #may want to variablize this one
          pdptype: ip
    - name: start wwan card
      shell:
        cmd: uqmi -d /dev/cdc-wdm0 --start-network internet --autoconnect
    - name: commit changes
      uci:
        command: commit
      notify: restart network
    - name: install tailscale
      opkg:
        name: tailscale
        state: present
    - name: init tailscale
      shell:
        cmd: tailscale up --advertise-routes=172.31.128.0/17 --accept-routes --exit-node="{{ main_router_tailscale_ip }}" --exit-node-allow-lan-access=true --netfilter-mode=off --snat-subnet-routes=true
    - name: create tailscale firewall zone
    - name: setup tailscale firewall zone
      uci:
        command: set
        key: firewall.tailscale
        value:
          name: tailscale
          input: ACCEPT
          output: ACCEPT
          forward: ACCEPT
          masq: 1
          mtu_fix: 1
          enabled: 1
    - name: list network
      uci:
        command: add_list
        key: firewall.tailscale.network
        value: tailscale
    - name: forward tailscale to lan
      uci:
        command: set
        key: firewall.@forwarding[0]
        value:
          src: tailscale
          dest: lan
    - name: forward lan to tailscale
      uci:
        command: set
        key: firewall.@forwarding[1]
        value:
          src: lan
          dest: tailscale
    - name: forward tailscale to wan
      uci:
        command: set
        key: firewall.@forwarding[2]
        value:
          src: tailscale
          dest: wan
    - name: Force DNS Through Router
      uci:
        command: set
        key: firewall.@redirect[0]
        value:
          target: DNAT
          name: 'Force DNS'
          src: lan
          src_dport: 53
    - name: commit changes
      uci:
        command: commit
      notify: restart network














- name: Install Tailscale
  hosts: routers
    vars: 
# CONSIDER CHANGING THE NEXT FEW PLAYS 
# TO BE MORE IN LINE WITH HOW PFSENSE CREATES FIREWALL RULES
#
- name: Tailscale Setup
  hosts: main_router
  become: yes
  become_user: asutliff
  roles:
    - role: artis3n.tailescale
      vars:
        tailscale_args: "--advertise-routes=192.168.0.0/17 --snat-subnet-routes=true --accept-routes --advertise-exit-node"
        tailscale_authkey: "{{ lookup('env', 'TAILSCALE_KEY') }}"
    - role: routing
      vars:
        table: filter
        chain: FORWARD
        in_interface: 'tailscale0'
        jump: ACCEPT
    - role: routing
      vars:
        table: nat
        chain: POSTROUTING
        out_interface: '{{ ansible_default_ipv4.interface }}'
        jump: MASQUARADE
    ### PORT FORWARDING FOR PUBLIC K8S IGRESSES ###
    - role: routing
      vars:
        table: nat
        chain: PREROUTING
        in_interface: wan0
        destination_port: 80
        jump: DNAT
        to_destination: '{{ find k8s LB in inventory}}'
        

  # iptables bug fix needs to be done
  # run an ACCEPT chain on the tailscale0 interface, POSTROUT nat to local lan interface
  #

# sudo iptables -A FORWARD -i lan0 -o wan0 DROP
# # sudo iptables -A PREROUTING -i lan0 -j DNAT 
# then add output 
# iptables -t nat -A POSTROUTING -i lan0 -o tailscale0 -j MASQUARADE
- name: Remote Router Tailscale Setup
  hosts: remote_router
  become: yes
  become_user: asutliff
  roles:
    - role: artis3n.tailscale
      vars:
        tailscale_args: "advertise-routes=192.168.128.0/17 --snat-subnet-routes=true --accept-routes"
        tailscale_authkey: "{{ lookop('env', 'TAILSCALE_KEY') }}"
    - role: routing
      vars:
        masquarade_out_interface: 'tailscale0'
        masquarade_source: '192.168.128.0/17'
        masquarade_dest: '192.168.0.0/17'



- name: Local Router Pfsense Setup
- name: Configure pfSense firewall and NAT rules for Tailscale interface  
  hosts: main_router 
  gather_facts: no  
  collections:  
    - pfsensible.core  
  
  tasks:  
    - name: Allow traffic from tailscale0 to lan0 subnet  
      pfsensible.core.rule:  
        state: present  
        name: "Allow tailscale0 to lan0 subnet"  
        action: "pass"  
        interface: "tailscale0"  
        direction: "in"  
        ipprotocol: "inet"  
        protocol: "any"  
        source:  
          network: "any"  
        destination:  
          network: "192.168.0.0/17"  
      
    - name: Allow traffic from tailscale0 to any  
      pfsensible.core.rule:  
        state: present  
        name: "Allow tailscale0 to any"  
        action: "pass"  
        interface: "tailscale0"  
        direction: "in"  
        ipprotocol: "inet"  
        protocol: "any"  
        source:  
          network: "any"  
        destination:  
          network: "any"  
      
    - name: Create NAT rule to masquerade traffic from tailscale0 to lan0 subnet  
      pfsensible.core.nat:  
        state: present  
        type: "outbound"  
        interface: "lan0"  
        source_network: "tailscale0 subnet"  # Replace with the actual tailscale0 subnet  
        destination_network: "192.168.0.0/17"  
        translation_address: "interface"  
        descr: "NAT tailscale0 to lan0 subnet"  
  
    - name: Create NAT rule to masquerade all other traffic from tailscale0 to wan0  
      pfsensible.core.nat:  
        state: present  
        type: "outbound"  
        interface: "wan0"  
        source_network: "tailscale0 subnet"  # Replace with the actual tailscale0 subnet  
        destination_network: "!192.168.0.0/17"  
        translation_address: "interface"  
        descr: "NAT tailscale0 to wan0"  


- name: Remote Router Setup
  hosts: remote_router
  become_user: asutliff
  tasks:
- name: Create NAT rule to masquerade LAN to Tailscale  
      pfsensible.core.rule:  
        state: present  
        name: "Masquerade LAN to Tailscale"  
        action: "pass"  
        interface: "lan0"  
        direction: "in"  
        ipprotocol: "inet45"  
        source: 192.168.128.0/17:lan0
        destination: "any"
      register: result  

# NOTE, GPT IS INTERPRETING SOURCE AND DESTINATION IN TWO SEPARATE FIELDS
#         source:  
#          network: "lan"  # Ensure this matches the name of your LAN network in pfSense  
#        destination:  
#          network: "any"  # or specify a specific destination network if needed  
#      register: result
  
    - name: Debug the result  
      debug:  
        var: result 

    - name: Add Block Non-Tailscale Trafic
      pfsense_rule:
        name: 'Block Trafic from 192.168.128.0/17 to wan0'
        action: block
        

